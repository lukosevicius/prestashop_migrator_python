#! /usr/bin/python3.7
import sys
import os
import shutil
import re
# import send2trash
# import mysql.connector
import subprocess
import re

COMMANDS = ['zip', 'export', 'db', 'clean']
SERVER = '/home/mantas/Server'
MYSQL_CONFIG = '/usr/local/bin/prs_script/mysql_config'


def start():

    # Check if command is given with arguments, if not - ask to write it
    if len(sys.argv) < 2 or sys.argv[1] not in COMMANDS:
        command = askOption()
    else:
        command = sys.argv[1]

    # Check if project name is given with arguments
    if len(sys.argv) > 2:
        projectName = sys.argv[2]
    else:
        projectName = False

    if command == "zip":
        prepareZip(projectName)
    elif command == "export":
        prepareZip(projectName)
    elif command == "clean":
        clean()
    elif command == "db":
        exportDB(False, False, sys.argv[2])


def clean():

    print("Cleaning old copied files from Server...")
    deleteCount = 0
    deleteList = []

    for dir in os.listdir(SERVER):
        if '-prcopy' in dir:
            deleteList.append(dir)
            deleteCount += 1
            # print(SERVER+'/'+dir)
            # send2trash.send2trash(SERVER+'/'+dir)

    print("Deleted directories: " + str(deleteList))
    print("Total: " + str(deleteCount) + " directories")


def prepareZip(projectName):

    projectPath = getProjectPath(projectName)

    print("Starting export...")
    print("Project path: " + projectPath)

    newDirPath = copyProject(projectPath)
    exportDB(projectPath, newDirPath)


def exportDB(projectPath = False, newDirPath = False, dbName = False):

    if projectPath:
        print("Getting database name...")

        dbFile = newDirPath+'/db_export.sql'

        # Reading 'parameters.php' file
        textfile = open(projectPath+'/app/config/parameters.php', 'r')
        content = textfile.read()
        textfile.close()

        # Searching for database name in 'parameters.php' file
        dbRegex = re.compile('\'database_name\'\s=>\s\'(\w*)\'')
        dbName = dbRegex.search(content).group(1)
        print(dbName)

        print("Exporting database...")

        # Delete old 'db_export.sql' id exists
        if(os.path.isfile(dbFile)):
            print("deleting old 'db_export.sql' file")
            os.remove(dbFile)
            print("deleted")
    else:
        dbFile ='db_export.sql'


    # Create empty file called 'db_export.sql'
    subprocess.Popen(['touch', 'db_export.sql'])

    # Dump database to 'db_export.sql'
    dumpFile = open(dbFile, 'w')
    subprocess.call(
        ['mysqldump', f'--defaults-extra-file={MYSQL_CONFIG}', f'{dbName}'], stdout=dumpFile)
    dumpFile.close()

    print(f"Exported database to {dbFile}")


def copyProject(projectPath):

    print("Copying project...")
    projectName = getProjectNameFromPath(projectPath)

    count = 0
    while True:
        count += 1
        newDirPath = projectPath + '-prcopy' + str(count)
        if not os.path.isdir(newDirPath):
            break

    shutil.copytree(projectPath, newDirPath)
    print(f"Copied to {newDirPath}")

    return newDirPath


def getProjectNameFromPath(projectPath):
    nameRegex = re.compile('\w+$')
    mo = nameRegex.search(projectPath)
    return mo.group()


def getProjectPath(projectName):
    # Ask for project name if not entered
    if not projectName:
        projectName = input("Enter project name: \n")

    # Check if folder with such name exists
    if os.path.isabs(projectName):
        if not os.path.isdir(projectName):
            print("No such project")
            quit()
        else:
            projectPath = projectName
    else:
        projectPath = SERVER + '/' + projectName
        if not os.path.isdir(projectPath):
            print("No such project")
            quit()

    return projectPath


def askOption():
    optionChosen = False

    while not optionChosen:
        print("Options: " + str(COMMANDS))
        command = input("Enter option:\n")
        if command in COMMANDS:
            optionChosen = True

    return command


start()
